DROP TABLE Many_to_many;
DROP TABLE Left_part;
DROP TABLE Right_part;

--CREATE, INSERT-----------------------------------------------------------------------------------

CREATE TABLE Left_part
(
pk               int NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
byte_2           smallint,
byte_4           int,
byte_8           bigint,
true_false       boolean,
byte_5_17        decimal,
byte_5_17_       numeric,
byte_8_          money,
byte_4_8         float,
byte_4__         real,
YYYY_MM_DD       date,
hh_mm_ss_nnnnnnn time,
fixed_length     char(10),
length_rus       varchar(10),
fixed_length_rus nchar(10)
);

INSERT INTO Left_part (byte_2, byte_4,     byte_8,              true_false,    byte_5_17, byte_5_17_, byte_8_,              byte_4_8, byte_4__, YYYY_MM_DD,   hh_mm_ss_nnnnnnn,   fixed_length, length_rus,  fixed_length_rus) VALUES
                      (32767,  2147483647, 9223372036854775807, true,          1.2,       3.4,        922337203685477.5807, 1.2,      3.4,      '2024-11-20', '17:50:00.1234567', 'eeeeeeeeee', 'eeeee', 'уууууууууу'),
                      (32765,  2147483647, 9223372036854775807, true,          1.2,       3.4,        922337203685477.5807, 1.2,      3.4,      '2024-11-20', '17:50:00.1234567', 'eeeeeeeeee', 'eeeee', 'уууууууууу');

CREATE TABLE Right_part (
pk           int NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
first_param  int,
second_param varchar(10),
third_param  date
);

INSERT INTO Right_part (first_param, second_param, third_param) VALUES 
                       (3,           'q',          '2024-11-20'),
                       (2,           'w',          '2024-11-20'),
                       (1,           'e',          '2024-11-20');

CREATE TABLE Many_to_many (
pk       int NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
left_pk  int REFERENCES Left_part(pk)  ON DELETE CASCADE,
right_pk int REFERENCES Right_part(pk) ON DELETE CASCADE
);

INSERT INTO Many_to_many (left_pk, right_pk) VALUES 
                         (1,       1),
                         (2,       2),
                         (2,       3);

--VAR----------------------------------------------------------------------------------------------

DO $$
DECLARE var int = 10;
BEGIN
    RAISE NOTICE 'Значение: %', var;
END $$;

--SELECT-------------------------------------------------------------------------------------------

SELECT * FROM Left_part 
INNER JOIN Many_to_many
ON (Left_part.pk = Many_to_many.left_pk)
INNER JOIN Right_part
ON (Many_to_many.right_pk = Right_part.pk)
WHERE Left_part.pk = 2;

--UPDATE-------------------------------------------------------------------------------------------

UPDATE Left_part SET byte_2 = 32766 WHERE byte_2 = 32767;
SELECT * FROM Left_part;

--DELETE-------------------------------------------------------------------------------------------

DELETE FROM Left_part WHERE byte_2 = 32765;
SELECT * FROM Left_part;

--FUNCTION-----------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION get_max_num(length_ varchar(50)) RETURNS money AS $$
DECLARE
    result money;
BEGIN
   RETURN MAX(byte_8_)
   FROM Left_part
   WHERE length_rus = length_;
END;
$$ LANGUAGE plpgsql;

DO $$
DECLARE max_num money;
BEGIN
    max_num = (SELECT get_max_num('eeeee'));
    RAISE NOTICE 'Значение: %', max_num;
END $$;

--PROCEDURE-----------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE insert_conn_info(left_pk_ int, right_pk_ int)
LANGUAGE SQL
AS $$
INSERT INTO Many_to_many (left_pk, right_pk) VALUES 
(left_pk_, right_pk_);
$$;

CALL insert_conn_info(1, 2);
SELECT * FROM Many_to_many;

--TRIGGER------------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION Right_part_insert_update()
RETURNS trigger AS $$
BEGIN
    UPDATE Right_part
    SET first_param = 30
    WHERE pk = lastval();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER Right_part_insert_update
    AFTER INSERT ON Right_part
    FOR EACH ROW
    EXECUTE FUNCTION Right_part_INSERT_UPDATE();

INSERT INTO Right_part (second_param, third_param) VALUES 
('e', '2024-11-20');
SELECT * FROM Right_part
